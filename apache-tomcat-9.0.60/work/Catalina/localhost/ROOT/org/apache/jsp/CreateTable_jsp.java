/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.60
 * Generated at: 2022-03-17 11:53:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class CreateTable_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 String st2[]; 
 String t4; 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/D:/FakeNewDetection/apache-tomcat-9.0.60/webapps/ROOT/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1364136296000L));
    _jspx_dependants.put("jar:file:/D:/FakeNewDetection/apache-tomcat-9.0.60/webapps/ROOT/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153365282000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fimport_0026_005fvar_005furl_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fimport_0026_005fvar_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fimport_0026_005fvar_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       \r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
 
        String t2 = request.getParameter("sample"); 
        String t3 = request.getParameter("choose");
       
        String t5 = request.getParameter("sample2"); 
        String t6 = request.getParameter("choose2");

		 String run=request.getParameter("run");
       
      if (t2==null || t3==null)
          {

          t2=t5;
          t3=t6;
         
          }
        pageContext.setAttribute("modelnew",t3,pageContext.SESSION_SCOPE);

        String t1="https://fake-news-detection-2022.herokuapp.com/"; 
        if (t2!= null)
        {
        t2=t2.replaceAll(" ","%20"); 
        pageContext.setAttribute("cc1",t2,pageContext.SESSION_SCOPE); 
        }
        
      out.write("\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fset_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        ");
      if (_jspx_meth_c_005fimport_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("        ");
 String json = (String)pageContext.getAttribute("result");
        String json2 = json.replace("}", "");
        StringTokenizer st = new StringTokenizer(json2,",");
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        <tbody>\r\n");
      out.write("            <tr>\r\n");
      out.write("            ");

            int i = 0;
            while (st.hasMoreTokens())
            {
              i++;
              String[] st2= st.nextToken().toString().split(":");
              
            
      out.write("\r\n");
      out.write("              ");
 if (i==3)
              { 
                
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
      out.print(st2[1]);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("              ");
 break;
            }
               
      out.write("\r\n");
      out.write("            ");

            }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");

             st = new StringTokenizer(json2,",");
             i = 0;

            while (st.hasMoreTokens())
            {
              i++;
              
              String[] st3= st.nextToken().toString().split(":");
              
            
      out.write("\r\n");
      out.write("              ");
 if (i==5)
              { 
                
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("              ");
 
            break;
          } 
      out.write("\r\n");
      out.write("            ");

            }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");

             st = new StringTokenizer(json2,",");
             i = 0;

            while (st.hasMoreTokens())
            {
              i++;
              
              String[] st3= st.nextToken().toString().split(":");
              
            
      out.write("\r\n");
      out.write("              ");
 if (i==4)
              { 
                
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("              ");
 
            break;
          } 
      out.write("\r\n");
      out.write("            ");

            }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");

             st = new StringTokenizer(json2,",");
             i = 0;

            while (st.hasMoreTokens())
            {
              i++;
              
              String[] st3= st.nextToken().toString().split(":");
              
            
      out.write("\r\n");
      out.write("              ");
 if (i==6)
              { 
                
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("              ");
 
            break;
          } 
      out.write("\r\n");
      out.write("            ");

            }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");

            st = new StringTokenizer(json2,",");
            i = 0;

           while (st.hasMoreTokens())
           {
             i++;
             
             String[] st3= st.nextToken().toString().split(":");
             
           
      out.write("\r\n");
      out.write("             ");
 if (i==7)
             { 
               
      out.write("\r\n");
      out.write("           <td>\r\n");
      out.write("             ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("           </td>\r\n");
      out.write("             ");
 
           break;
         } 
      out.write("\r\n");
      out.write("           ");

           }
           
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("           ");

           st = new StringTokenizer(json2,",");
           i = 0;

          while (st.hasMoreTokens())
          {
            i++;
            
            String[] st3= st.nextToken().toString().split(":");
            
          
      out.write("\r\n");
      out.write("            ");
 if (i==8)
            { 
              
      out.write("\r\n");
      out.write("          <td>\r\n");
      out.write("            ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("          </td>\r\n");
      out.write("            ");
 
          break;
        } 
      out.write("\r\n");
      out.write("          ");

          }
          
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("          ");

          st = new StringTokenizer(json2,",");
          i = 0;

         while (st.hasMoreTokens())
         {
           i++;
           
           String[] st3= st.nextToken().toString().split(":");
           
         
      out.write("\r\n");
      out.write("           ");
 if (i==2)
           { 
             
      out.write("\r\n");
      out.write("         <td>\r\n");
      out.write("           ");
      out.print(st3[1]);
      out.write("\r\n");
      out.write("         </td>\r\n");
      out.write("           ");
 
         break;
       } 
      out.write("\r\n");
      out.write("         ");

         }
         
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("         ");

         st = new StringTokenizer(json2,",");
         i = 0;

        while (st.hasMoreTokens())
        {
          i++;
          
          String[] st3= st.nextToken().toString().split(":");
          
        
      out.write("\r\n");
      out.write("          ");
 if (i==1)
          { 
            
      out.write("\r\n");
      out.write("        <td>\r\n");
      out.write("\r\n");
      out.write("          ");
      out.print( "\"https:" + st3[3]);
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("          ");
 
        break;
      } 
      out.write("\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        </tr>\r\n");
      out.write("      \r\n");
      out.write("      </tbody>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /CreateTable.jsp(35,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("cc");
      // /CreateTable.jsp(35,8) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/CreateTable.jsp(35,8) '${cc1}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${cc1}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f1_reused = false;
    try {
      _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f1.setParent(null);
      // /CreateTable.jsp(36,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setVar("model");
      // /CreateTable.jsp(36,8) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setValue(new org.apache.jasper.el.JspValueExpression("/CreateTable.jsp(36,8) '${modelnew}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${modelnew}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
      if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      _jspx_th_c_005fset_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fimport_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f0 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005fvar_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    boolean _jspx_th_c_005fimport_005f0_reused = false;
    try {
      _jspx_th_c_005fimport_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fimport_005f0.setParent(null);
      // /CreateTable.jsp(38,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f0.setVar("result");
      // /CreateTable.jsp(38,8) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f0.setUrl((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("https://fake-news-detection-2022.herokuapp.com/${cc}/${model}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int[] _jspx_push_body_count_c_005fimport_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fimport_005f0 = _jspx_th_c_005fimport_005f0.doStartTag();
        if (_jspx_th_c_005fimport_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fimport_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fimport_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fimport_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fimport_0026_005fvar_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f0);
      _jspx_th_c_005fimport_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fimport_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fimport_005f0_reused);
    }
    return false;
  }
}
